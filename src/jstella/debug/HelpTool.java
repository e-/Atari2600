/*
 * HelpTool.java
 *
 * Created on August 20, 2007, 7:42 PM
 */

package jstella.debug;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import javax.swing.text.BadLocationException;

/**
 *
 * @author  Sysop
 */
public class HelpTool extends javax.swing.JFrame {
    private final static int MAX_CHARS_PER_CODE_LINE=80;
    
    /** Creates new form HelpTool */
    public HelpTool() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        PUContent = new javax.swing.JPopupMenu();
        MIPaste = new javax.swing.JMenuItem();
        PanelCenter = new javax.swing.JPanel();
        LabelTopicName = new javax.swing.JLabel();
        TFTopicName = new javax.swing.JTextField();
        LabelContent = new javax.swing.JLabel();
        SPContent = new javax.swing.JScrollPane();
        TAContent = new javax.swing.JTextArea();
        PanelSouth = new javax.swing.JPanel();
        ButtonCopyToClipboard = new javax.swing.JButton();
        ButtonClear = new javax.swing.JButton();

        MIPaste.setText("Paste");
        MIPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIPasteActionPerformed(evt);
            }
        });

        PUContent.add(MIPaste);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Help Tool");
        PanelCenter.setLayout(new java.awt.GridBagLayout());

        LabelTopicName.setText("Topic Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        PanelCenter.add(LabelTopicName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        PanelCenter.add(TFTopicName, gridBagConstraints);

        LabelContent.setText("Topic Content");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        PanelCenter.add(LabelContent, gridBagConstraints);

        TAContent.setColumns(20);
        TAContent.setComponentPopupMenu(PUContent);
        TAContent.setLineWrap(true);
        TAContent.setRows(5);
        TAContent.setWrapStyleWord(true);
        SPContent.setViewportView(TAContent);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 100.0;
        PanelCenter.add(SPContent, gridBagConstraints);

        getContentPane().add(PanelCenter, java.awt.BorderLayout.CENTER);

        ButtonCopyToClipboard.setText("Copy code to clipboard");
        ButtonCopyToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCopyToClipboardActionPerformed(evt);
            }
        });

        PanelSouth.add(ButtonCopyToClipboard);

        ButtonClear.setText("Clear");
        ButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClearActionPerformed(evt);
            }
        });

        PanelSouth.add(ButtonClear);

        getContentPane().add(PanelSouth, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MIPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIPasteActionPerformed
   TAContent.paste();        
    }//GEN-LAST:event_MIPasteActionPerformed

    private void ButtonCopyToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCopyToClipboardActionPerformed
         copyCodeToClipboard();
    }//GEN-LAST:event_ButtonCopyToClipboardActionPerformed

    private void ButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClearActionPerformed
      TFTopicName.setText("");
      TAContent.setText("");
    }//GEN-LAST:event_ButtonClearActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HelpTool().setVisible(true);
            }
        });
    }
    
    private String getNewLineConvertedString(String aString)
    {
        StringBuffer zSB=new StringBuffer();
        int zCharCount=aString.length();
        for (int i=0; i<zCharCount; i++)
        {
            if ((i>0)&&((i % MAX_CHARS_PER_CODE_LINE) == 0)) 
            {
                zSB.append("\"\n\t\t + \"");
            }//end : break line up into smaller parts
            String zChar="" + aString.charAt(i);
            if (zChar.equals("\n")) zSB.append("\\n");
            else zSB.append(zChar);
        }
        return zSB.toString();
    }
    
    
    
    private void copyCodeToClipboard()
    {
        try{
        String zTopicName=TFTopicName.getText();
        StringBuffer zSB=new StringBuffer();
        
        int zLineCount=TAContent.getLineCount();
        for (int i=0; i<zLineCount; i++)
        {
            int zStart=TAContent.getLineStartOffset(i);
            int zEnd=TAContent.getLineEndOffset(i);
            String zLine=TAContent.getText(zStart, zEnd - zStart);
            String zConvertedLine=getNewLineConvertedString(zLine);
            zSB.append("\t\t"); //indent with two tabs
            if (i>=1) zSB.append(" + ");
            zSB.append("\"" + zConvertedLine + "\"");
            if (i<zLineCount - 1) zSB.append("\n");
        }//end : for i loop
        
        String zFinalString="myHelpTopicList.add( new JSHelpTopic(\"" + zTopicName + "\", " + "\n" + zSB.toString() + ")); //constructed with HelpTool";
        StringSelection zContents =new StringSelection(zFinalString);
        

                     
                      
        java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(zContents, null);
        
        }//end : try 
        
         catch (BadLocationException e) {
        
          }
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonClear;
    private javax.swing.JButton ButtonCopyToClipboard;
    private javax.swing.JLabel LabelContent;
    private javax.swing.JLabel LabelTopicName;
    private javax.swing.JMenuItem MIPaste;
    private javax.swing.JPopupMenu PUContent;
    private javax.swing.JPanel PanelCenter;
    private javax.swing.JPanel PanelSouth;
    private javax.swing.JScrollPane SPContent;
    private javax.swing.JTextArea TAContent;
    private javax.swing.JTextField TFTopicName;
    // End of variables declaration//GEN-END:variables
    
    
  

    
    
    
    
    
    
}
